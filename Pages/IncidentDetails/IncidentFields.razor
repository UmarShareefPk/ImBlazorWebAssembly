<table class="table field-table table-borderless">
    <tr>
        <td>
            <span class="field-title">Assignee</span>           
        </td>
        <td>          
            <AssigneeDropdown selectedAssignee="@assignee" assigneeChanged="assigneeHasChanged"></AssigneeDropdown>
        </td>
    </tr>
    <tr>
        <td>
            <span class="field-title">Status</span>           
        </td>
        <td>
            <select class="line-textbox" value="@status" @onchange="statusHasChanged" >
                <option value="N">New</option>
                <option value="I">In Progress</option>
                <option value="C">Closed</option>
                <option value="A">Approved</option>
            </select>
        </td>
    </tr>
    <tr>
        <td class="field-td">
            <span class="field-title text-nowrap">Start Time</span>            
             <i class="material-icons edit-btn" @onclick="startDateEditToggle" >edit</i>
         </td>
        <td>            
            <span title="@startTime" class='@(!startDateEditable? "" : "d-none" )' >@startTimeToDisplay</span>
           
            <div class='@(!startDateEditable? "d-none" : "" )'>
                <RadzenDatePicker ShowTime="true" @bind-Value="newStartDate" Change=@startDateChange />
                <button class="btn bg-success text-white" @onclick="updateStartTime">Update</button>
            </div>               
        </td>
    </tr>
    <tr>
        <td class="field-td">
            <span class="field-title text-nowrap">Due Date</span>
            <i class="material-icons edit-btn" @onclick="dueDateEditToggle">edit</i>
        </td>
        <td>           
            <span title="@dueDate" class='@(!dueDateEditable? "" : "d-none" )'>@dueDateToDisplay</span>
         
            <div class='@(!dueDateEditable? "d-none" : "" )'>
                <RadzenDatePicker  ShowTime="true" @bind-Value="newDueDate" Change=@dueDateChange />
                <button class="btn bg-success text-white" @onclick="updateDueDate">Update</button>
            </div>           
        </td>
    </tr>
</table>



@code {

    [Parameter]
    public string incidentId { get; set; }
    [Parameter]
    public string status { get; set; }
    [Parameter]
    public string assignee { get; set; }
    [Parameter]
    public DateTime startTime { get; set; } = DateTime.Now;
    [Parameter]
    public DateTime dueDate { get; set; } = DateTime.Now;

    private string startTimeToDisplay = "";
    private string dueDateToDisplay = "";

      protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {            
        }
    }

    protected override async Task OnParametersSetAsync()
    {
         startTimeToDisplay = new(await JS.InvokeAsync<string>("getMoment", startTime));
         dueDateToDisplay = new(await JS.InvokeAsync<string>("getMoment", dueDate));
    }

    private async Task assigneeHasChanged(string userId)
    {

        bool success =  await updateIncident("AssignedTo", userId);
        if(success)
        {
            assignee = userId;
        }
    }

    private async Task statusHasChanged(ChangeEventArgs arg)
    {
        string newStatus = arg.Value.ToString();
        await updateIncident("Status", newStatus);
    }

    private bool startDateEditable = false;
    private void startDateEditToggle()
    {
        startDateEditable = !startDateEditable;
    }

    private DateTime newStartDate = DateTime.Now;    

    void startDateChange(DateTime? value)
    {        
    }

    async Task updateStartTime()
    {
        bool success = await updateIncident("StartTime", newStartDate.ToString());
        if (success)
        {
            startTime = newStartDate;
            startTimeToDisplay = new(await JS.InvokeAsync<string>("getMoment", startTime));           
            startDateEditToggle();
        }
    }

    async Task updateDueDate()
    {
        bool success = await updateIncident("DueDate", newDueDate.ToString());
        if (success)
        {
            dueDate = newDueDate;
            dueDateToDisplay = new(await JS.InvokeAsync<string>("getMoment", dueDate));
            dueDateEditToggle();
        }
    }

    private bool dueDateEditable = false;
    private void dueDateEditToggle()
    {
        dueDateEditable = !dueDateEditable;
    }

    private DateTime newDueDate = DateTime.Now;    

    void dueDateChange(DateTime? value)
    {        
    }

    async Task<bool> updateIncident(string field, string value)
    {
        string token = await localStorage.GetItemAsync<string>("token");
        string loggedInUser = await UserService.GetLoggedInUserId();

        bool isSuccess = await IncidentService.UpdateIncident(token, new
        {
            IncidentId = incidentId,
            Parameter = field,
            Value = value,
            UserId = loggedInUser
        });

        return isSuccess;

    }


}
