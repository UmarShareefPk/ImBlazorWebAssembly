@using ImBlazorWebAssembly.Helper
@using System.Net.Http.Headers
@using System.Text.Json

<div class="new-comment">
    <textarea class="line-textbox" @bind="commentText" oninput="auto_grow(event);" placeholder="Type comment">
    </textarea>
    
    
@*
<InputFile id="commentfiles"  OnChange="LoadFiles" multiple></InputFile>*@
<div class="file-upload-container">
    <div class="file-upload-wrapper">
        <button class="btn"><i class="material-icons">attachment</i></button>
        <span id="commentFileuploadInfo">Click here to upload files</span>
    </div>
    <input type="file" id="newCommentFiles" onchange="fileuploadChanged(this,'commentFileuploadInfo');" multiple />
</div>


<div class="new-comment-actions">
        @*<span>Cancel</span>*@
    <button @onclick="SaveComment" class="btn btn-md bg-success text-white">
        Comment
    </button>       
</div>

</div>
@code {
    [Parameter]
    public string incidentId { get; set; }
    [Parameter]
    public EventCallback<Comment> commentAdded { get; set; }

    string commentText = "";
    NewCommentModel newCommentModel { get; set; }
    IBrowserFile files;


    private void LoadFiles(InputFileChangeEventArgs e)
    {
        files = e.File;
    }

    private async Task SaveComment()
    {
        string userId = await UserService.GetLoggedInUserId();
        var newComment=  await JS.InvokeAsync<object>("addComment", IncidentService.GetBaseUrl() ,commentText, "newCommentFiles", incidentId, userId );
        if(newComment is not null)
        {
            var json = ((JsonElement)newComment).GetRawText();
            var comment = JsonSerializer.Deserialize<Comment>(json);
            commentText = "";
            await commentAdded.InvokeAsync(comment);
        }

    }
    private async Task SaveCommentTest()
    {
        string userId = await UserService.GetLoggedInUserId();
        var s=  await JS.InvokeAsync<bool>("addComment", commentText, "newCommentFiles", incidentId, userId );

        var formContent = new FormUrlEncodedContent(new[]{
        new KeyValuePair<string, string>("username", "myusername"),
        new KeyValuePair<string, string>("password", "myPa$$word")
    });

        using (var content = new MultipartFormDataContent())
        {
            var values = new[]
            {
            new KeyValuePair<string, string>("Foo", "Bar"),
            new KeyValuePair<string, string>("More", "Less"),
       };

            foreach (var keyValuePair in values)
            {
                content.Add(new StringContent(keyValuePair.Value), keyValuePair.Key);
            }

            //var fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(fileName));
            //fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment")
            //    {
            //       // FileName = "Foo.txt"
            //    };
            //foreach (var file in files)
            //{
            //    var fileContent = new ByteArrayContent(System.IO.File.ReadAllBytes(files));
            //    content.Add(fileContent);
            //}



            var requestUri = "/api/action";
            //var result = client.PostAsync(requestUri, content).Result;
        }

    }

}
