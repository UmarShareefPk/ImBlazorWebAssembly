
@if(comment is not null)
{
    <div class="comment-box">
        <div class="comment-header">
            <div class="comment-source">
                <span class="creator">@username</span> 
                <span class="info-text">added a comment</span> - 
                <span class="time-stamp" title="@comment.CreateDate" >@createDateToDisplay</span>
            </div>
            <div class="comment-actions">
               @* <i class="fa-solid fa-pen"></i>*@
                 <i class="material-icons edit">edit</i>
                <i class="material-icons del">delete_forever</i>
            </div>
        </div>
    <div class="comment-body">
        <span class="text-muted">
            @comment.CommentText
        </span>
        @if(comment.attachments.Count > 0)
            {
                foreach(var file in comment.attachments)
                {
                    <div class="file-box">
                        <div class="file-name">
                            <i class="fa fa-file"></i>
                            <span class="text-nowrap" title="@file.FileName"> @(file.FileName.Length >20? file.FileName.Substring(0,20) + "...": file.FileName)</span>
                        </div>
                        <div class="file-actions">
                         
                            <i title="Download file" class="material-icons download">download</i>
                            <i title="Delete file" class="material-icons del">delete_forever</i>
                        </div>
            </div>
                }
            }
        </div>

    </div>
}


@code {
    [Parameter]
    public Comment comment { get; set; }
    private string username = "";
    private string createDateToDisplay = "";

  protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    protected override async Task OnParametersSetAsync()
    {
         username = await UserService.GetUserNameById(comment.UserId);
         createDateToDisplay = new(await JS.InvokeAsync<string>("getMoment", comment.CreateDate));
    }
    

}
