
@if(comment is not null)
{
    <div class="comment-box">
        <div class="comment-header">
            <div class="comment-source">
                <span class="creator">@username</span> 
                <span class="info-text">added a comment</span> - 
                <span class="time-stamp" title="@comment.CreateDate" >@createDateToDisplay</span>
            </div>
            <div class="comment-actions">
               @* <i class="fa-solid fa-pen"></i>*@
                 <i class="material-icons edit" @onclick="makeEditable">edit</i>
                <i class="material-icons del">delete_forever</i>
            </div>
        </div>
    <div class="comment-body">
        <div class="@(editable? "comment-editable": "text-muted")" contenteditable="@(editable? true: false)">
            @commentText     
        </div>
       @* <input type="text" class="editable_text" />*@
         <div class="comment-edit-btns @(editable? "": "d-none")">
              <button class="btn bg-warning text-white">
                    <div>
                        <i class="material-icons">cancel</i>
                        <span>Cancel</span>
                    </div>
              </button>
              <button class="btn bg-primary text-white">
                    <div>
                        <i class="material-icons">save</i>
                        <span>Save</span>
                    </div>
              </button>               
         </div>
        @if(comment.attachments.Count > 0)
            {
                <span class="comment-files-toggle" @onclick="@(() => showFiles = !showFiles)">
            @if (showFiles)
            {
                <i class="material-icons">visibility_off</i>
                <span>Hide @comment.attachments.Count attachments</span>
            }
            else
            {
                <i class="material-icons">visibility</i>
                <span>Show @comment.attachments.Count attachments</span>
            }
        </span>
        <div class="@(showFiles? "" : "d-none")">
                @foreach(var file in comment.attachments)
                {
                        var currentFile = file;
                        <div class="file-box">
                        <div class="file-name">
                           
                            <span class="text-nowrap" title="@file.FileName">  <i class="material-icons">attachment</i> @(file.FileName.Length >20? file.FileName.Substring(0,20) + "...": file.FileName)</span>
                        </div>
                        <div class="file-actions">
                         
                            <i title="Download file" @onclick="@((file) => downlodFile(currentFile))" class="material-icons download">download</i>
                            <i title="Delete file"   @onclick="@((file) => deleteFile(currentFile))" class="material-icons del">delete_forever</i>
                        </div>
            </div>
                }
                </div>
            }
        </div>

    </div>
}


@code {
    [Parameter]
    public Comment comment { get; set; }
    public string commentText = "";
    private string username = "";
    private bool showFiles = false;
    private string createDateToDisplay = "";
    bool editable = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            commentText = comment.CommentText;
        }
    }

    void makeEditable()
    {
        editable = !editable;
        if(!editable)
        {
            commentText = comment.CommentText;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        username = await UserService.GetUserNameById(comment.UserId);
        createDateToDisplay = new(await JS.InvokeAsync<string>("getMoment", comment.CreateDate));
    }

    private async Task downlodFile(CommentAttachments file)
    {
        string r = await JS.InvokeAsync<string>("downloadCommentFile", IncidentService.GetBaseUrl(), comment.IncidentId, file );
    }

    private async Task deleteFile(CommentAttachments file)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete file?");
        if (confirmed)
        {
            string token = await localStorage.GetItemAsync<string>("token");    
            bool isSuccess =  await IncidentService.DeleteFile(token, "comment", comment.IncidentId, comment.Id, file.Id, file.FileName, file.ContentType);
            if(isSuccess)
            {
                var attachments = comment.attachments;
                attachments = attachments.Where(f => f.Id != file.Id).ToList();
                comment.attachments = attachments;
                StateHasChanged();
            }

        }
    }
}
