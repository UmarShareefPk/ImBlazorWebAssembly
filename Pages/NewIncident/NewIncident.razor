<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalCenterTitle">
         <i class="material-icons">
                add
            </i>   <span>New Incident</span>
         </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
        <div class="modal-body">
            <div class="field">
                <div class="field-tile"> Title <span class="text-danger">*</span> </div>
                <div>
                    <input type="text" @bind="title" placeholder="Type title" maxlength="100" class="line-textbox w-100 shadow-none text-gray " />
                </div>
            </div>
            <div class="field">
                <div class="field-tile"> Assignee <span class="text-danger">*</span> </div>
                <div>
                    <AssigneeDropdown selectedAssignee="@assigneeId" assigneeChanged="@assigneeHasChanged"></AssigneeDropdown>
                </div>
            </div>
             <div class="field">
                <div class="field-tile"> Start Time <span class="text-danger">*</span></div>
                <div>
                    <RadzenDatePicker ShowTime="true" @bind-Value="startTime" Change=@startTimeChange />
                </div>
            </div>

            <div class="field">
                <div class="field-tile"> Due Date <span class="text-danger">*</span></div>
                <div>
                    <RadzenDatePicker Min="@DateTime.Now" ShowTime="true" @bind-Value="dueDate" Change=@dueDateChange />
                </div>
            </div>
            <div class="field">
                <div class="field-tile">  Description <span class="text-danger">*</span> </div>
                <div>
                    <textarea class="line-textbox w-100" @bind="descryption" oninput="auto_grow(event);" placeholder="Type descryption">
                </textarea>
                </div>
            </div>
            
            <div class="field">
                <div class="field-tile"> Additional Details</div>
                <div>
                    <textarea class="line-textbox w-100" @bind="additionalDetails" oninput="auto_grow(event);" placeholder="Type additional details">
                </textarea>
                </div>
            </div>          

            <div class="field">
                <div class="field-tile"> Attachments</div>
                <div>
                    <div class="file-upload-container">
                        <div class="file-upload-wrapper">
                            <button class="btn"><i class="material-icons">attachment</i></button>
                            <span id="incidentFileuploadInfo">Click here to upload files</span>
                        </div>
                        <input type="file" id="newIncidentFiles" onchange="fileuploadChanged(this,'incidentFileuploadInfo');" multiple />
                    </div>
                </div>
            </div>
                <div class="@(error != "" ? "field" : "d-none")">
                    <span class="text-danger"> @error </span>
                </div>
          
        </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-warning text-white" data-dismiss="modal">
           <div class="d-flex">
                <i class="material-icons mr-1"> cancel </i>
                <span> Cancel </span>
          </div>
        </button>
        <button type="button" class="btn btn-primary" @onclick="saveIncident" >
          <div class="d-flex">
            <i class="material-icons mr-1"> save </i>
            <span> Save </span>
          </div>
        </button>
      </div>
    </div>
  </div>
</div>

@code {

    [Parameter]
    public EventCallback<bool> incidentAdded { get; set; }

    private string title = "";
    private string descryption = "";
    private string additionalDetails = "";
    private string assigneeId = "";
    private DateTime startTime = DateTime.Now;
    private DateTime dueDate = DateTime.Now;
    string error = "";

    private async Task assigneeHasChanged(string userId)
    {
        assigneeId = userId;
    }

    void startTimeChange(DateTime? value)
    {
    }
    void dueDateChange(DateTime? value)
    {
    }

    async Task saveIncident()
    {
        if (string.IsNullOrEmpty(title) || string.IsNullOrEmpty(assigneeId) || string.IsNullOrEmpty(descryption))
            error = "Please fill all required fields";

        else if (startTime > dueDate)
            error = "Start time cannot be greater than Due Date";
        else if (dueDate < DateTime.Now)
            error = "Due Date should be in future.";
        else
            error = "";

        var fields = new
        {
            Title = title,
            descryption = descryption,
            additionalDetails = additionalDetails,
            assigneeId = assigneeId,
            startTime = startTime,
            dueDate = dueDate,
            files = "newIncidentFiles",
        };

        string userId = await UserService.GetLoggedInUserId();
        var newIncident=  await JS.InvokeAsync<object>("addIncident", IncidentService.GetBaseUrl() , fields);
        if(newIncident is not null)
        {
            // var json = ((JsonElement)newComment).GetRawText();
            // var comment = JsonSerializer.Deserialize<Comment>(json);
            title = "";
            descryption = "";
            additionalDetails = "";


            await incidentAdded.InvokeAsync(true);
        }

    }

}
