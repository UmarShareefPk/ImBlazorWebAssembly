@page "/Users"
@using IM.Models

<div class="container px-8">
    <br />
    <div class="report-title">Users</div>
    <br />

    <input type="text" @bind="searchTxt"   class="line-textbox w-25" placeholder="Enter title or description and hit Search" />
        <button class="btn btn-outline-success search-btn" @onclick="SearchTextChanged"> 
        <div>
               <i class="material-icons">search</i>
               <span> Search </span>
       </div>
    </button>
    <br />
    <br />

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th class="text-nowrap" scope="col">First Name</th>
                <th class="text-nowrap" scope="col">Last Name</th>
                <th class="text-nowrap" scope="col">Email</th>
                <th class="text-nowrap" scope="col">Created Date</th>              
            </tr>
        </thead>
        <tbody>
                @if (users != null)
                {
                    @foreach (User user in users)
                    {
                        <UsersListRow user="@user"></UsersListRow>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4"> <p class="loading-p"> Loading...</p></td>
                    </tr>
                     
                }
        
        </tbody>

    </table>
</div>
    <Pagination pageNumber="@pageNumber" pageSize="@pageSize" totalRecords="@totalRecords" pageSizeOrNumberChanged="ReloadUsers"></Pagination>

</div>

@code {
        
    List<User> users;
    int totalRecords;
    int pageNumber = 1;
    int pageSize = 5;
    string searchTxt = "";


    private async Task ReloadUsers(dynamic pageInfo)
    {
        pageSize = pageInfo.pSize;
        pageNumber = pageInfo.pNumber;
        await GetUsers(pageSize, pageNumber, searchTxt);
       
    }

    private async Task SearchTextChanged()
    {          
        await GetUsers(pageSize, pageNumber, searchTxt);        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetUsers(5, 1, "");
          
        }
    }

    private async Task GetUsers(int pageSize, int pageNumber, string search)
    {
        string token = await localStorage.GetItemAsync<string>("token");
        var userPages = await UserService.GetUsersWithPage(token, pageSize, pageNumber, search);

        users = userPages.Users;
        totalRecords = userPages.Total_Users;
          StateHasChanged();
    }

     
}
