@using ImBlazorWebAssembly.Shared.Notifications
@using Microsoft.AspNetCore.SignalR.Client

<nav class="navbar sticky-top navbar-expand-lg">
    <div class="container">
        <a class="navbar-brand" href="/Dashboard">
            <img src="/img/logo-white.png" height="50px" />
        </a>

        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
            <i class="fas fa-bars text-white"></i>
             <i class="material-icons text-whit">menu</i>
        </button>
        <div class="collapse navbar-collapse" id="navbarText">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item active" >
                    <a class="nav-link" href="/Incidents">  
                      @*  <i class="fa fa-bug"></i>*@
                           <i class="material-icons">pest_control</i>
                            Incidents
                      </a>
                </li>
                <li class="nav-item">
                    
                    <a class="nav-link" href="/Users">
                       <i class="material-icons">people</i>
                        Users</a>
                </li>
                <li class="nav-item">
                    <Notifications @ref="notificationsComponent"></Notifications>
                </li>
                <li class="nav-item" >
                    <a class="nav-link" href="#" @onclick="Logout">
                        <i class="material-icons text-danger"  title="Log out">logout</i>                        
                    </a>
                </li>
            </ul>
         
        </div>
    </div>
</nav>

@code {
    [Inject]
    public NavigationManager navigationManager { get; set; }
    private HubConnection? hubConnection;

    private Notifications.Notifications notificationsComponent;

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("token");
        navigationManager.NavigateTo("/"); 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await signalrReceiver();
        } 
    }

    private async Task signalrReceiver()
    {
        string token = await localStorage.GetItemAsync<string>("token");
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://imwebapicore.azurewebsites.net" + "/hubs/notifications")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("UpdateNotifications", (incidentId) =>
        {
            InvokeAsync(notificationsComponent.loadNotifications);
        });

        await hubConnection.StartAsync();
        await NotificationService.UpdateHubId(token, hubConnection.ConnectionId);
    }

}
