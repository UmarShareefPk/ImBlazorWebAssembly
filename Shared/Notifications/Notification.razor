
@if(notification is not null)
{
    <div class="notification-div @(notification.IsRead? "read" : "unread")">
        <div class="notification-text-div"  >
            @if (notification.IsRead)
            {
                <i class="material-icons notification-icon"  @onclick="changeStatus"  title="Mark Unread">drafts</i>
               
            }
            else
            {
                <i class="material-icons notification-icon" @onclick="changeStatus"  title="Mark Read">email</i>
            }

            <span class="notification-text" @onclick="openIncident" >@notification.NotifyAbout</span>

        </div>

        <span class="timestamp" title="@notification.CreateDate" >@timestamp</span>
    </div>
}

@code {
    [Inject]
    public NavigationManager navigationManager { get; set; }

    [Parameter]
    public IncidentNotification notification { get; set; }

    [Parameter]
    public EventCallback<string> notificationStatusChanged { get; set; }

    string timestamp = "";

    protected override async Task OnParametersSetAsync()
    {
        timestamp = new(await JS.InvokeAsync<string>("getMoment", notification.CreateDate));
    }

    [JSInvokable]
    public static async Task callMeFromJS()
    {
        // await NotificationService.UpdateStatus(token, notification.Id, (!notification.IsRead).ToString());
    }

    async Task changeStatus()
    {     
        string token = await localStorage.GetItemAsync<string>("token");       
        bool isSuccess =  await NotificationService.UpdateStatus(token, notification.Id, (!notification.IsRead).ToString());
        if (isSuccess)
            await notificationStatusChanged.InvokeAsync(notification.Id);
    }

    void openIncident()
    {
        if (!notification.IsRead)
            changeStatus();
        navigationManager.NavigateTo("/IncidentDetails/" + notification.IncidentId);
    }

}
